[project]
name = "coincidence"
version = "0.1.0"
description = "A Bitcoin implementation built from scratch for educational purposes."
authors = [{ name = "Mix", email = "32300164+mnixry@users.noreply.github.com" }]
dependencies = [
    "base58>=2.1.1",        # For wallet address encoding
    "cryptography>=44.0.0", # For cryptographic operations
    "sqlalchemy>=2.0.36",   # For database operations
]
requires-python = ">=3.12"
readme = "README.md"
license = { text = "AGPL-3.0-or-later" }

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[dependency-groups]
dev = [
    "ruff>=0.8.4",
    "pytest>=8.3.4",
    "pytest-sugar>=1.0.0",
    "pytest-cov>=6.0.0",
    "pytest-random-order>=1.1.1",
    "pytest-xdist[psutil]>=3.6.1",
    "httpx[http2]>=0.28.1",
]

[tool.basedpyright]
typeCheckingMode = "recommended"
pythonPlatform = "All"

[tool.ruff]
target-version = "py312"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D1",      # Missing docstring
    "EM",      # flake8-errmsg 
    "TRY003",  # Avoid specifying long messages outside the exception class
    "ANN2",    # Missing return type annotation
    "PLC0414", # Import alias does not rename original package
    "D213",    # Multi-line docstring summary should start at the second line (conflict with D212)
    "D203",    # No blank lines allowed before class docstring (conflict with formatter)
    "COM812",  # Trailing comma missing (conflict with formatter)
    "ISC001",  # Trailing comma present (conflict with formatter)
    "TD002",   # Missing author in TODO
]

[tool.ruff.lint.extend-per-file-ignores]
"**/*_test.py" = [
    "S101",    # Use of assert detected
    "PLR2004", # Magic value used in comparison
]

[tool.pdm]
distribution = true

[tool.pdm.scripts]
test = "pytest"
format = "ruff format"
lint = "ruff check"

[tool.pytest.ini_options]
addopts = "--cov=. --random-order --random-order-bucket=global -n auto"

[tool.coverage.report]
exclude_also = [
    # Skip abstract methods
    "raise AssertionError",
    "raise NotImplementedError",
    "@(abc\\.)?abstractmethod",
    # Pytest
    "if __name__ == .__main__.:",
    "pytest\\.skip",
    "pytest\\.mark\\.skip",
]
show_missing = true

[tool.coverage.run]
branch = true
omit = [
    "**/cli/*.py", # Skip the CLI coverage report
]
