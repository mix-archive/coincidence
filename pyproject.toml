[project]
name = "coincidence"
version = "0.1.0"
description = "A Bitcoin implementation built from scratch for educational purposes."
authors = [{ name = "Mix", email = "32300164+mnixry@users.noreply.github.com" }]
dependencies = ["base58>=2.1.1", "cryptography>=44.0.0"]
requires-python = ">=3.12"
readme = "README.md"
license = { text = "AGPL-3.0-or-later" }

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[dependency-groups]
dev = [
    "ruff>=0.8.3",
    "pytest>=8.3.4",
]

[tool.basedpyright]
typeCheckingMode = "recommended"

[tool.ruff]
lint.select = [
    "F",     # Pyflakes
    "E",     # Pycodestyle errors
    "W",     # Pycodestyle warnings
    "C90",   # mccabe
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "YTT",   # flake8-2020
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "COM",   # flake8-commas
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "T10",   # flake8-debugger
    "EXE",   # flake8-executable
    "FA",    # flake8-future-annotations
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "LOG",   # flake8-logging
    "G",     # flake8-logging-format
    "INP",   # flake8-no-pep420
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SLOT",  # flake8-slot
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "TC",    # flake8-type-checking
    "INT",   # flake8-gettext
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "TD",    # flake8-todos
    "FIX",   # flake8-fixme
    "ERA",   # eradicate
    "PD",    # pandas-vet
    "PGH",   # pygrep-hooks
    "PL",    # pylint
    "TRY",   # tryceratops
    "NPY",   # numpy
    "PERF",  # perflint
    "FURB",  # refurb
    "RUF",   # ruff specific rules
]
lint.ignore = [
    "B008",   # Do not perform calls in argument defaults
    "TRY003", # Avoid specifying long messages outside the exception class
    "ANN201", # Missing type annotation for self in method
]
target-version = "py312"

[tool.pdm]
distribution = true

